# -*- coding: utf-8 -*-
"""Final_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DfiuwqZCcVHIZHof1aAoIHW2zqHnL2iW
"""

import pandas as pd

df_orders_products_prior = pd.read_csv("order_products__prior.csv")

df_orders_products_train = pd.read_csv("order_products__train.csv")

df_ordres =pd.read_csv("orders.csv")

df_products = pd.read_csv("products.csv")

df_aisles = pd.read_csv("aisles.csv")

df_departments = pd.read_csv("departments.csv")

final_df.drop_duplicates()

# viewing the samples



df_orders_products_prior.head()

df_orders_products_prior.head()

df_ordres.head()

df_products.head()

df_departments.head()

# note : first Merge df_order_products_prior with df_products on 'product_id'
# 2.  Merge with df_orders on 'order_id'
# 3. Merge with df_aisles on 'aisle_id'
# 4. Merge with df_departments on 'department_id' and  we merge

df = df_orders_products_prior.merge(df_products, on="product_id", how="left")

df.head()

df = df.merge(df_ordres, on="order_id", how="left")

df.head()

df = df.merge(df_aisles, on="aisle_id", how="left")

df.head()

final_df = df.merge(df_departments, on="department_id", how="left")

final_df

final_df.drop_duplicates(inplace = True)

final_df.shape

final_df.isnull().sum()

final_df.columns

# Renameing colums name that imporve our understanding - pps

final_df.rename(columns={"add_to_cart_order":"Product_added_to_Cart","aisle_id":"sale_id","eval_set":"Type of order (train, test, prior)","order_dow":"Day of the week","order_hour_of_day":"Hour of day","days_since_prior_order":"Days since the userâ€™s previous order"})

final_df.head()

final_df.tail(20)

final_df.isnull().sum()

final_df = final_df.dropna(subset=["days_since_prior_order"])

final_df = final_df.dropna(subset =["user_id","eval_set","order_number","order_dow","order_hour_of_day"])

final_df.isnull().sum()

#Feature Engineering

#Total Orders per User

user_total_orders = final_df.groupby('user_id')['order_number'].max().reset_index(name='user_total_orders')
final_df = final_df.merge(user_total_orders, on='user_id', how='left')

final_df.head()

#Total Products per Order

order_size = final_df.groupby('order_id')['product_id'].count().reset_index(name='order_size')
final_df = final_df.merge(order_size, on='order_id', how='left')

final_df.head()

#Reorder Rate per Product

product_reorder_rate = final_df.groupby('product_id')['reordered'].mean().reset_index(name='product_reorder_rate')
final_df = final_df.merge(product_reorder_rate, on='product_id', how='left')

final_df.head()

#Reorder Ratio per User

user_reorder_ratio = final_df.groupby('user_id')['reordered'].mean().reset_index(name='user_reorder_ratio')
final_df = final_df.merge(user_reorder_ratio, on='user_id', how='left')

final_df.head()

#Hour & Day Based Features

final_df['is_weekend'] = final_df['order_dow'].apply(lambda x: 1 if x in [0, 6] else 0)
final_df['is_morning_order'] = final_df['order_hour_of_day'].apply(lambda x: 1 if 5 <= x <= 11 else 0)

final_df.head()

# User-Product Interaction Count

user_product_orders = final_df.groupby(['user_id', 'product_id']).size().reset_index(name='user_product_order_count')
final_df = final_df.merge(user_product_orders, on=['user_id', 'product_id'], how='left')

final_df.head()

pd.set_option("display.max_columns",None)

# Removing the product_name, eval_set,aisle, department,
# since they are all unique and not req for the model so droping

final_df = final_df.drop(columns=["product_name","eval_set","aisle","department"])

final_df

final_df.drop(columns=["order_id","product_id","user_id","order_number"], axis =1, inplace = True)

# basic info

final_df.isnull().sum()

final_df.info()

final_df.head()

#Preprocessing

x = final_df.drop(columns=["reordered"])

y = final_df["reordered"]

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()

for col in x.columns:
    x[col] = sc.fit_transform(x[[col]])

x.head()

pip install tensorflow

from tensorflow.keras.utils import to_categorical
import numpy as np

y = y.astype(int)

y = to_categorical(y)



from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=42)

x_train.shape

x_test.shape

y_train.shape

y_test.shape

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

model = Sequential()
model.add(Dense(200, input_dim=x_train.shape[1], activation='relu'))
model.add(Dense(150, activation='relu'))
model.add(Dense(100, activation='relu'))
model.add(Dense(50, activation='relu'))
model.add(Dense(20, activation='relu'))
model.add(Dense(1, activation='sigmoid'))  # Final layer for binary classification

model.compile(loss="binary_crossentropy", optimizer="adam", metrics=["accuracy"])

from tensorflow.keras.callbacks import EarlyStopping

early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)

model.summary()

result = model.fit(x_train,y_train,epochs=50, batch_size= 15)

result = model.fit(x_train,y_train,epochs=50, batch_size= 16, validation_split = 0.1)

result_df = pd.DataFrame(result.history)
result_df

model.save("final_reorder_model.h5")